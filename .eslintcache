[{"C:\\Users\\jespe\\Documents\\GitHub\\Omicle\\src\\serviceWorker.js":"1","C:\\Users\\jespe\\Documents\\GitHub\\Omicle\\src\\landingpage.jsx":"2","C:\\Users\\jespe\\Documents\\GitHub\\Omicle\\src\\App.jsx":"3","C:\\Users\\jespe\\Documents\\GitHub\\Omicle\\src\\components\\footer.jsx":"4","C:\\Users\\jespe\\Documents\\GitHub\\Omicle\\src\\components\\header.jsx":"5","C:\\Users\\jespe\\Documents\\GitHub\\Omicle\\src\\components\\section.jsx":"6","C:\\Users\\jespe\\Documents\\GitHub\\Omicle\\src\\index.jsx":"7"},{"size":5110,"mtime":1566915197606,"results":"8","hashOfConfig":"9"},{"size":12593,"mtime":1566916866447,"results":"10","hashOfConfig":"9"},{"size":293,"mtime":1566914111305,"results":"11","hashOfConfig":"9"},{"size":595,"mtime":1566916562724,"results":"12","hashOfConfig":"9"},{"size":577,"mtime":1566915507603,"results":"13","hashOfConfig":"9"},{"size":537,"mtime":1566915500694,"results":"14","hashOfConfig":"9"},{"size":465,"mtime":1566914917871,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},"16fxp76",{"filePath":"19","messages":"20","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\jespe\\Documents\\GitHub\\Omicle\\src\\serviceWorker.js",["31","32","33","34","35"],"// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(reg => {\r\n      const registration = reg;\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","C:\\Users\\jespe\\Documents\\GitHub\\Omicle\\src\\landingpage.jsx",["36","37","38"],"C:\\Users\\jespe\\Documents\\GitHub\\Omicle\\src\\App.jsx",[],"C:\\Users\\jespe\\Documents\\GitHub\\Omicle\\src\\components\\footer.jsx",[],"C:\\Users\\jespe\\Documents\\GitHub\\Omicle\\src\\components\\header.jsx",[],"C:\\Users\\jespe\\Documents\\GitHub\\Omicle\\src\\components\\section.jsx",[],"C:\\Users\\jespe\\Documents\\GitHub\\Omicle\\src\\index.jsx",[],{"ruleId":"39","severity":1,"message":"40","line":39,"column":15,"nodeType":"41","messageId":"42","endLine":39,"endColumn":26},{"ruleId":"39","severity":1,"message":"40","line":52,"column":15,"nodeType":"41","messageId":"42","endLine":52,"endColumn":26},{"ruleId":"39","severity":1,"message":"40","line":64,"column":7,"nodeType":"41","messageId":"42","endLine":64,"endColumn":20},{"ruleId":"39","severity":1,"message":"40","line":90,"column":7,"nodeType":"41","messageId":"42","endLine":90,"endColumn":18},{"ruleId":"39","severity":1,"message":"40","line":117,"column":11,"nodeType":"41","messageId":"42","endLine":117,"endColumn":22},{"ruleId":"39","severity":1,"message":"40","line":89,"column":9,"nodeType":"41","messageId":"42","endLine":89,"endColumn":20},{"ruleId":"39","severity":1,"message":"40","line":97,"column":9,"nodeType":"41","messageId":"42","endLine":97,"endColumn":20},{"ruleId":"39","severity":1,"message":"40","line":105,"column":9,"nodeType":"41","messageId":"42","endLine":105,"endColumn":20},"no-console","Unexpected console statement.","MemberExpression","unexpected"]